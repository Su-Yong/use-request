"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[31],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return h}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(n),h=a,m=d["".concat(l,".").concat(h)]||d[h]||u[h]||o;return n?r.createElement(m,s(s({ref:t},p),{},{components:n})):r.createElement(m,s({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},9409:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return i},metadata:function(){return c},toc:function(){return u}});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),s=["components"],i={id:"fetcher",title:"Fetcher"},l="Fetcher",c={unversionedId:"fetcher",id:"fetcher",title:"Fetcher",description:"Fetcher is actually a function that sends a request. Since use-request has Built-in Fetcher by default, fetcher can be used directly in previous example. But the default fetcher is not universal. So, use-request allows you to customize Fetcher.",source:"@site/docs/fetcher.md",sourceDirName:".",slug:"/fetcher",permalink:"/use-request/docs/fetcher",editUrl:"https://github.com/Su-Yong/use-request/blob/docs/website/docs/docs/fetcher.md",tags:[],version:"current",frontMatter:{id:"fetcher",title:"Fetcher"},sidebar:"docsSidebar",previous:{title:"Start",permalink:"/use-request/docs/start"},next:{title:"Options",permalink:"/use-request/docs/options"}},p={},u=[{value:"Basic",id:"basic",level:2},{value:"Passing Data",id:"passing-data",level:2}],d={toc:u};function h(e){var t=e.components,n=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"fetcher"},"Fetcher"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Fetcher")," is actually a function that sends a ",(0,o.kt)("inlineCode",{parentName:"p"},"request"),". Since ",(0,o.kt)("inlineCode",{parentName:"p"},"use-request")," has ",(0,o.kt)("strong",{parentName:"p"},"Built-in")," ",(0,o.kt)("inlineCode",{parentName:"p"},"Fetcher")," by default, ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher")," can be used directly in ",(0,o.kt)("a",{parentName:"p",href:"start"},"previous example"),". But the default ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher")," is not universal. So, ",(0,o.kt)("inlineCode",{parentName:"p"},"use-request")," allows you to customize ",(0,o.kt)("inlineCode",{parentName:"p"},"Fetcher"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const { data, fetcher } = useRequest(url);\n")),(0,o.kt)("p",null,"we have used ",(0,o.kt)("inlineCode",{parentName:"p"},"useRequest")," as above. But what if you want to receive response as text instead of JSON?"),(0,o.kt)("h2",{id:"basic"},"Basic"),(0,o.kt)("p",null,"First, let's create a function that just receives text."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const textFetcher = async () => {\n  const response = await fetch(url);\n\n  return response.text();\n};\n")),(0,o.kt)("p",null,"I made a function that simply uses ",(0,o.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/fetch"},"fetch")," to get the response as text."),(0,o.kt)("p",null,"Let's put the url as an argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher")," function."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{1}","{1}":!0},"const textFetcher = async (url) => {\n  const response = await fetch(url);\n\n  return response.text();\n};\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher")," function created in this way returns text when called like ",(0,o.kt)("inlineCode",{parentName:"p"},"await textFetcher(URL);"),". Now let's provide this to ",(0,o.kt)("inlineCode",{parentName:"p"},"useRequest"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const { data, fetcher } = useRequest(url, { fetcher: textFetcher });\n")),(0,o.kt)("p",null,"We made it. Just pass ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher")," to the key ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher")," like this. Now ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," becomes ",(0,o.kt)("inlineCode",{parentName:"p"},"string"),"."),(0,o.kt)("h2",{id:"passing-data"},"Passing Data"),(0,o.kt)("p",null,"But this is not enough. We usually have to put data somewhere when we send a ",(0,o.kt)("inlineCode",{parentName:"p"},"POST")," request. The ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher")," we created above cannot send any additional data. Then how about editing ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher")," like this?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{1,3-7}","{1,3-7}":!0},"const textFetcher = async (url, body) => {\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.text();\n};\n")),(0,o.kt)("p",null,"Editing like above, additional data can be sent when calling ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher"),". And ",(0,o.kt)("inlineCode",{parentName:"p"},"useRequest")," will also be able to send data."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"const { data, fetcher } = useRequest(url, { fetcher: textFetcher });\n// ...\nfetcher({ data: 'test' });\n")),(0,o.kt)("p",null,"Pay attention to passing ",(0,o.kt)("inlineCode",{parentName:"p"},"object")," when calling ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher"),". The argument you put in ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher")," is the same as the second argument in ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher"),"."),(0,o.kt)("p",null,"So, how about changing it like this?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{1,3,17}","{1,3,17}":!0},"const textFetcher = async (url, body, method) => {\n  const response = await fetch(url, {\n    method,\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  });\n\n  return response.text();\n};\n\n/* ---------- */\n\nconst { data, fetcher } = useRequest(url, { fetcher: textFetcher });\n// ...\nfetcher({ data: 'test' }, 'POST');\n")),(0,o.kt)("p",null,"It works as we expected! The value ",(0,o.kt)("inlineCode",{parentName:"p"},"'POST'")," is passed to the ",(0,o.kt)("inlineCode",{parentName:"p"},"method")," of ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher"),"."),(0,o.kt)("p",null,"Finally, would it still works even if change the function like this?"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:"{1,3,7,18}","{1,3,7,18}":!0},"const textFetcher = async (url, body, method = 'POST', headers = {}) => {\n  const response = await fetch(url, {\n    method,\n    body: JSON.stringify(body),\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n  });\n\n  return response.text();\n};\n\n/* ---------- */\n\nconst { data, fetcher } = useRequest(url, { fetcher: textFetcher });\n// ...\nfetcher({ data: 'test' }, 'POST', { Authorization: `bearer ${token}` });\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"defaultParameter")," also works. Do not forget it. All arguments ",(0,o.kt)("strong",{parentName:"p"},"same")," except for the first argument of ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher"),", which takes the argument of ",(0,o.kt)("inlineCode",{parentName:"p"},"useRequest.fetcher")," as an option."),(0,o.kt)("p",null,"And if we replace ",(0,o.kt)("inlineCode",{parentName:"p"},"return response.text();")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"return response.json();")," in the ",(0,o.kt)("inlineCode",{parentName:"p"},"textFetcher"),", it becomes the default ",(0,o.kt)("inlineCode",{parentName:"p"},"fetcher")," provided by ",(0,o.kt)("inlineCode",{parentName:"p"},"use-request"),"."))}h.isMDXComponent=!0}}]);